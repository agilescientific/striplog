{"cells": [{"cell_type": "markdown", "metadata": {}, "source": ["# Merge overlapping striplogs\n", "\n", "Imagine we have a Striplog with overlapping Interval. We would like to be able to merge the Intervals in this Striplog, while following some rules about priority. \n", "\n", "For example, imagine we have a striplog object, as shown below on the left. Note that the Intervals in the striplog have a `time` property, so I've 'exploded' that out along the horizontal axis so the Intervals don't all overlap in this display. The point is that they overlap in depth.\n", "\n", "<img src=\"./merging.png\" />\n", "\n", "**NB** This other property does not have to be time, it could be any property that we can use to make comparisons.\n", "\n", "**NB again** The 'mix' (blended) merges indicated in the figure have not been implemented yet."]}, {"cell_type": "markdown", "metadata": {}, "source": ["## Make some data\n", "\n", "Let's make some striplogs that look like these..."]}, {"cell_type": "code", "execution_count": 1, "metadata": {}, "outputs": [{"name": "stderr", "output_type": "stream", "text": ["/home/matt/miniconda3/envs/welly/lib/python3.9/site-packages/striplog/striplog.py:512: UserWarning: No lexicon provided, using the default.\n", "  warnings.warn(w)\n"]}], "source": ["from striplog import Striplog\n", "\n", "csv = \"\"\"Top,Base,Comp Time,Comp Depth\n", "100,200,2,a\n", "110,120,1,b\n", "150,325,3,c\n", "210,225,1,d\n", "300,400,2,e\n", "350,375,3,f\n", "\"\"\"\n", "\n", "s = Striplog.from_csv(text=csv)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["Here's what the first Interval looks like:"]}, {"cell_type": "code", "execution_count": 2, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td style=\"width:2em; background-color:#DDDDDD\" rowspan=\"6\"></td><td><strong>top</strong></td><td>100.0</td></tr><tr><td><strong>primary</strong></td><td><table><tr><td><strong>time</strong></td><td>2.0</td></tr><tr><td><strong>depth</strong></td><td>a</td></tr></table></td></tr><tr><td><strong>summary</strong></td><td>100.00 m of 2.0, a</td></tr><tr><td><strong>description</strong></td><td></td></tr><tr><td><strong>data</strong></td><td><table></table></td></tr><tr><td><strong>base</strong></td><td>200.0</td></tr></table>"], "text/plain": ["Interval({'top': Position({'middle': 100.0, 'units': 'm'}), 'base': Position({'middle': 200.0, 'units': 'm'}), 'description': '', 'data': {}, 'components': [Component({'time': 2.0, 'depth': 'a'})]})"]}, "execution_count": 2, "metadata": {}, "output_type": "execute_result"}], "source": ["s[0]"]}, {"cell_type": "markdown", "metadata": {}, "source": ["We'll need a `Legend` so we can make nice plots:"]}, {"cell_type": "code", "execution_count": 3, "metadata": {}, "outputs": [], "source": ["from striplog import Legend\n", "\n", "# Data for legend (for display)...\n", "leg_csv = \"\"\"Colour,Comp Depth\n", "red,a\n", "orange,b\n", "limegreen,c\n", "cyan,d\n", "blue,e\n", "magenta,f\n", "\"\"\"\n", "\n", "legend = Legend.from_csv(text=leg_csv)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["Now we can make a plot. I'll make the Intervals semi-transparent so you can see how they overlap:"]}, {"cell_type": "code", "execution_count": 4, "metadata": {}, "outputs": [{"data": {"image/png": "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\n", "text/plain": ["<Figure size 108x324 with 1 Axes>"]}, "metadata": {"needs_background": "light"}, "output_type": "display_data"}], "source": ["s.plot(legend=legend, lw=1, aspect=3, alpha=0.35)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["It's not all that pretty, but we can also plot each time separately as in the figure we started with:"]}, {"cell_type": "code", "execution_count": 5, "metadata": {}, "outputs": [{"data": {"text/plain": ["(420.0, 80.0)"]}, "execution_count": 5, "metadata": {}, "output_type": "execute_result"}, {"data": {"image/png": "\n", "text/plain": ["<Figure size 576x576 with 3 Axes>"]}, "metadata": {"needs_background": "light"}, "output_type": "display_data"}], "source": ["import matplotlib.pyplot as plt\n", "\n", "fig, (ax0, ax1, ax2) = plt.subplots(ncols=3, sharey=True, figsize=(8, 8))\n", "s.find('1.0').plot(legend=legend, ax=ax0)\n", "s.find('2.0').plot(legend=legend, ax=ax1)\n", "s.find('3.0').plot(legend=legend, ax=ax2)\n", "plt.ylim(420, 80)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["## Merge\n", "\n", "We'd like to merge the Intervals so that everything retains depth order of course, but we want a few options about which Intervals should 'win' when there are several Intervals overlapping. For example, when looking at a particular depth, do we want to retain the Interval with the shallowest top? Or the deepest base? Or the greatest thickess? Or the one from the latest `time`?"]}, {"cell_type": "code", "execution_count": 6, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td style=\"width:2em; background-color:#DDDDDD\" rowspan=\"6\"></td><td><strong>top</strong></td><td>100.0</td></tr><tr><td><strong>primary</strong></td><td><table><tr><td><strong>time</strong></td><td>2.0</td></tr><tr><td><strong>depth</strong></td><td>a</td></tr></table></td></tr><tr><td><strong>summary</strong></td><td>100.00 m of 2.0, a</td></tr><tr><td><strong>description</strong></td><td></td></tr><tr><td><strong>data</strong></td><td><table></table></td></tr><tr><td><strong>base</strong></td><td>200.0</td></tr></table>"], "text/plain": ["Interval({'top': Position({'middle': 100.0, 'units': 'm'}), 'base': Position({'middle': 200.0, 'units': 'm'}), 'description': '', 'data': {}, 'components': [Component({'time': 2.0, 'depth': 'a'})]})"]}, "execution_count": 6, "metadata": {}, "output_type": "execute_result"}], "source": ["s[0]"]}, {"cell_type": "markdown", "metadata": {}, "source": ["So if we merge using `top` as a priority, we'll get whichever Interval has the greatest (deepest) `top` at any given depth:"]}, {"cell_type": "code", "execution_count": 7, "metadata": {}, "outputs": [{"data": {"image/png": "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\n", "text/plain": ["<Figure size 108x324 with 1 Axes>"]}, "metadata": {"needs_background": "light"}, "output_type": "display_data"}], "source": ["s.merge('top').plot(legend=legend, aspect=3)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["If we use `reverse=True` then we get whichever has the shallowest top:"]}, {"cell_type": "code", "execution_count": 8, "metadata": {}, "outputs": [{"data": {"image/png": "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\n", "text/plain": ["<Figure size 108x324 with 1 Axes>"]}, "metadata": {"needs_background": "light"}, "output_type": "display_data"}], "source": ["s.merge('top', reverse=True).plot(legend=legend, aspect=3)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["## Thickness priority\n", "\n", "What if we want to keep the thickest bed at any given depth?"]}, {"cell_type": "code", "execution_count": 9, "metadata": {}, "outputs": [{"data": {"image/png": "iVBORw0KGgoAAAANSUhEUgAAAGkAAAFMCAYAAADIlJILAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAIyElEQVR4nO3dX2iddx3H8ffHZt0G6voHKSUpdNCClMH+NEjLbqRD2IazvZgyEBckkJtdTCZo9U7wwt1YHcigUDET0Q0VWoswalsQL1bJ3OzsetFMkDZ0K25pVUQx+vUiv8KxtDkn/8z59HxecMjz/J4n6dO+c55z9l0gqiqiv31orS8gukskA4lkIJEMJJKBRDLQNZKk70u6IukPHWubJJ2QdKF93NjWJekFSdOSzkp6aDUvflD08kz6AfDoDWsHgZNVtRM42fYBHgN2tscE8OLKXOZg6xqpqn4NfHDD8n5gsm1PAgc61l+qea8BGyRtXaFrHVhLfU3aUlWX2/a7wJa2PQxc7DjvUluLZRha7heoqpK06NmSpAnmb4nsgt3nlnsh7qp0q0NLfSa9d/021j5eaeszwLaO80ba2k2uqQ5X1WhVjd69xIsYFEuNdAwYa9tjwNGO9afbu7w9wLWO22IsVVUt+AB+DFwG/sX8a8w4sJn5d3UXgF8Bm9q5Ar4HvAO8BYx2+/pVxW6oGvTHAv8+6of/VTEq1dRaX8RaW4XXpPg/SiQDiWQgkQwkkoFlTxyWQ9ITwBM71vIiDOQteL/IW3BviWQgkQwkkoFEMpBIBhLJQCIZSCQDGQsZyFioX2Qs5C2RDCSSgUQykEgGEslAIhlIJAOZOBjIxKFfZOLgLZEMJJKBRDKQSAYSyUAiGUgkA5k4GMjEoV9k4uAtkQwkkoFEMpBIBhLJQCIZSCQDfTFxWD+ynt1H71vLS1lzry9wbE2fSVX1i6qaGPrImn6v9L3c7gwkkoFEMpBIBhLJQCIZSCQDiWQgkQz0zVgobi1jIQO53RlIJAOJZCCRDCSSgUQykEgGEslAJg4GMnEwkNudgUQykEgGEslAIhlIJAOJZCCRDGTiYCATBwO53RlIJAOJZCCRDCSSgUQykEgGEslAJg4GMnEwkNudgUQykEgGEslAIhnoGknSNkmnJb0t6ZykZ9v6JkknJF1oHze2dUl6QdK0pLOSHlrtv8Ttrpdn0hzw5araBewBnpG0CzgInKyqncDJtg/wGLCzPSaAF1f8qgdM10hVdbmqfte2/wqcB4aB/cBkO20SONC29wMv1bzXgA2Stq70hQ+SRb0mSdoOPAicAbZU1eV26F1gS9seBi52fNqlthZL1HMkSR8GfgZ8qar+0nms5n8ryaJ+M4mkCUlTkqbmZucW86kDp6dIku5gPtCPqurnbfm967ex9vFKW58BtnV8+khb+x9VdbiqRqtqdGhjxkIL6eXdnYAjwPmq+nbHoWPAWNseA452rD/d3uXtAa513BZjCXr5Fn4Y+ALwlqQ329rXgW8Br0gaB/4EfK4d+yXwODAN/B344kpe8CDqGqmqfgPc6hcwPXKT8wt4ZpnXFR0ycTCQSAYSyUAiGUgkA/lBFAP5QRQDud0ZSCQDiWQgkQwkkoFEMpBIBhLJQCYOBjJxMJDbnYFEMpBIBhLJQCIZSCQDiWQgkQxk4mAgEwcDud0ZSCQDiWQgkQwkkoFEMpBIBhLJQCIZyFjIQMZCBnK7M5BIBhLJQCIZSCQDiWQgkQwkkoFMHAxk4mAgtzsDiWQgkQwkkoFEMpBIBhLJQCIZyMTBQCYOBnK7M5BIBhLJQCIZSCQDiWQgkQwkkoFMHAxk4mAgtzsDiWQgkQwkkoFEMpBIBhLJQCIZSCQDGQsZyFjIQG53BhLJQCIZSCQDiWQgkQwkkoFEMpCJg4FMHAzkdmcgkQwkkoFEMtA1kqS7JP1W0u8lnZP0jbZ+r6QzkqYlvSxpfVu/s+1Pt+PbV/nvcNvr5Zn0T2BfVd0PPAA8KmkP8DxwqKp2ALPAeDt/HJht64faebEMXSPVvL+13Tvao4B9wE/b+iRwoG3vb/u0449I0kpd8CDq6TVJ0jpJbwJXgBPAO8DVqpprp1wChtv2MHARoB2/BmxewWseOD1Fqqp/V9UDwAjwCeDjy/2DJU1ImpI0NTc71/0TBtii3t1V1VXgNLAX2CDp+qhgBJhp2zPANoB2/B7g/Zt8rcNVNVpVo0MbM3FYSC/v7j4maUPbvhv4FHCe+VhPttPGgKNt+1jbpx0/VVW1gtc8cHr5Ft4KTEpax3zUV6rquKS3gZ9I+ibwBnCknX8E+KGkaeAD4KlVuO6B0jVSVZ0FHrzJ+h+Zf326cf0fwGdX5OoCyMTBQiIZSCQDiWQgkQzkZxwM5GccDOR2ZyCRDCSSgUQykEgGEslAIhlIJAOJZCBjIQMZCxnI7c5AIhlIJAPqhx+Jk0YLptb6MtZUFbf8efk8kwwkkoFEMpBIBvpi4gA71vIy+l7e3fWJvLszl0gGEslAIhlIJAOJZCCRDCSSgUwcDGTi0CcycTCXSAYSyUAiGUgkA4lkIJEMJJKBRDKQsZCBjIX6RMZC5hLJQCIZSCQDiWQgkQwkkoFEMpCJg4FMHPpEJg7mEslAIhlIJAOJZCCRDCSSgUQykImDgUwc+kQmDuYSyUAiGUgkA4lkIJEMJJKBRDKQiYOBTBz6RCYO5hLJQCIZSCQDiWQgkQwkkoFEMpBIBjIWMpCxUJ/IWMhcIhlIJAOJZKDnSJLWSXpD0vG2f6+kM5KmJb0saX1bv7PtT7fj21fp2gfGYp5JzwLnO/afBw5V1Q5gFhhv6+PAbFs/1M6L5aiqrg9gBDgJ7AOOAwL+DAy143uBV9v2q8Detj3UztPCX393QQ30Y6F/n16fSd8BvgL8p+1vBq5W1VzbvwQMt+1h4GL7BpgDrrXzY4m6ThwkfRq4UlWvS/rkSv3BkiaAibZ7ror7Vupr3256GQs9DHxG0uPAXcBHge8CGyQNtWfLCDDTzp8BtgGXJA0B9wDv3/hFq+owcHj5f4XbX9fbXVV9rapGqmo78BRwqqo+D5wGnmynjQFH2/axtk87fqr6YfZkbDn/nfRV4DlJ08y/5hxp60eAzW39OeDg8i4x+mLAGgvLxMFAIhlIJAOJZCCRDCSSgUQykEgG/gshrBZUjkZbSwAAAABJRU5ErkJggg==\n", "text/plain": ["<Figure size 108x324 with 1 Axes>"]}, "metadata": {"needs_background": "light"}, "output_type": "display_data"}], "source": ["s.merge('thickness').plot(legend=legend, aspect=3)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["Or the thinnest bed?"]}, {"cell_type": "code", "execution_count": 10, "metadata": {}, "outputs": [{"data": {"image/png": "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\n", "text/plain": ["<Figure size 108x324 with 1 Axes>"]}, "metadata": {"needs_background": "light"}, "output_type": "display_data"}], "source": ["s.merge('thickness', reverse=True).plot(legend=legend, aspect=3)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["## Using the other attribute\n", "\n", "Remember we also have the time attribute? We could use that... we'll end up with which bed has the greatest (i.e. latest) top:"]}, {"cell_type": "code", "execution_count": 11, "metadata": {}, "outputs": [{"data": {"image/png": "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\n", "text/plain": ["<Figure size 108x324 with 1 Axes>"]}, "metadata": {"needs_background": "light"}, "output_type": "display_data"}], "source": ["s.merge('time').plot(legend=legend, aspect=3)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["...or earliest:"]}, {"cell_type": "code", "execution_count": 12, "metadata": {}, "outputs": [{"data": {"image/png": "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\n", "text/plain": ["<Figure size 108x324 with 1 Axes>"]}, "metadata": {"needs_background": "light"}, "output_type": "display_data"}], "source": ["s.merge('time', reverse=True).plot(legend=legend, aspect=3)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["## Real data example\n", "\n", "Intervals are perforations. Many of them overlap. They all have datetimes. For a given depth, we want to keep the _latest_ perforation."]}, {"cell_type": "code", "execution_count": 14, "metadata": {}, "outputs": [{"name": "stderr", "output_type": "stream", "text": ["/home/matt/miniconda3/envs/welly/lib/python3.9/site-packages/striplog/striplog.py:512: UserWarning: No lexicon provided, using the default.\n", "  warnings.warn(w)\n"]}], "source": ["from striplog import Striplog\n", "\n", "remap = {'bottom':'base','type':'comp type'}\n", "s = Striplog.from_csv(\"og815.csv\", remap=remap)"]}, {"cell_type": "code", "execution_count": 15, "metadata": {}, "outputs": [], "source": ["from datetime import datetime\n", "\n", "for iv in s:\n", "    iv.primary.date = datetime.fromisoformat(iv.data['date'])"]}, {"cell_type": "code", "execution_count": 16, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td style=\"width:2em; background-color:#DDDDDD\" rowspan=\"6\"></td><td><strong>top</strong></td><td>1992.0</td></tr><tr><td><strong>primary</strong></td><td><table><tr><td><strong>type</strong></td><td>perforation</td></tr><tr><td><strong>date</strong></td><td>2008-06-23 00:00:00</td></tr></table></td></tr><tr><td><strong>summary</strong></td><td>13.00 m of perforation, 2008-06-23 00:00:00</td></tr><tr><td><strong>description</strong></td><td></td></tr><tr><td><strong>data</strong></td><td><table><tr><td><strong></strong></td><td>37.0</td></tr><tr><td><strong>wells</strong></td><td>OG-815</td></tr><tr><td><strong>date</strong></td><td>2008-06-23</td></tr></table></td></tr><tr><td><strong>base</strong></td><td>2005.0</td></tr></table>"], "text/plain": ["Interval({'top': Position({'middle': 1992.0, 'units': 'm'}), 'base': Position({'middle': 2005.0, 'units': 'm'}), 'description': '', 'data': {'': 37.0, 'wells': 'OG-815', 'date': '2008-06-23'}, 'components': [Component({'type': 'perforation', 'date': datetime.datetime(2008, 6, 23, 0, 0)})]})"]}, "execution_count": 16, "metadata": {}, "output_type": "execute_result"}], "source": ["s[1]"]}, {"cell_type": "code", "execution_count": 17, "metadata": {}, "outputs": [{"data": {"image/png": "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\n", "text/plain": ["<Figure size 108x1080 with 1 Axes>"]}, "metadata": {"needs_background": "light"}, "output_type": "display_data"}], "source": ["s.plot(alpha=0.25)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["### Merge the perfs\n", "\n", "Now we can merge based on date:"]}, {"cell_type": "code", "execution_count": 18, "metadata": {"scrolled": true}, "outputs": [], "source": ["sm = s.merge('date')"]}, {"cell_type": "code", "execution_count": 19, "metadata": {}, "outputs": [], "source": ["leg = \"\"\"colour,comp type\n", "limegreen,perforation\n", "red,squeeze\"\"\""]}, {"cell_type": "code", "execution_count": 20, "metadata": {}, "outputs": [{"data": {"image/png": "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\n", "text/plain": ["<Figure size 108x540 with 1 Axes>"]}, "metadata": {"needs_background": "light"}, "output_type": "display_data"}], "source": ["from striplog import Legend\n", "\n", "legend = Legend.from_csv(text=leg)\n", "\n", "sm.plot(legend, lw=1, aspect=5)"]}, {"cell_type": "code", "execution_count": 21, "metadata": {}, "outputs": [], "source": ["sm.find_overlaps()"]}, {"cell_type": "markdown", "metadata": {}, "source": ["There are none, that's good!\n", "\n", "## Export to Petrel"]}, {"cell_type": "code", "execution_count": 22, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["Top,Base,Component\r\n", "1986.0,1992.0,\"Perforation, 2008-06-24 00:00:00\"\r\n", "1992.0,1995.0,\"Perforation, 2008-06-23 00:00:00\"\r\n", "1995.0,2000.0,\"Perforation, 2015-11-14 00:00:00\"\r\n", "2000.0,2010.0,\"Perforation, 2018-07-31 00:00:00\"\r\n", "2018.0,2023.0,\"Perforation, 2009-10-23 00:00:00\"\r\n", "2037.0,2053.0,\"Perforation, 2009-10-23 00:00:00\"\r\n", "2100.0,2105.0,\"Perforation, 2018-07-31 00:00:00\"\r\n", "2112.0,2119.0,\"Perforation, 2008-04-28 00:00:00\"\r\n", "2119.0,2127.0,\"Perforation, 2008-04-28 00:00:00\"\r\n", "2132.0,2136.0,\"Perforation, 2012-05-30 00:00:00\"\r\n", "2136.0,2141.0,\"Perforation, 2002-06-05 00:00:00\"\r\n", "2180.0,2189.0,\"Perforation, 2015-11-14 00:00:00\"\r\n", "2189.0,2195.0,\"Perforation, 2015-11-13 00:00:00\"\r\n", "2243.0,2245.0,\"Perforation, 2012-05-29 00:00:00\"\r\n", "2245.0,2246.0,\"Squeeze, 2008-04-28 00:00:00\"\r\n", "2246.0,2250.0,\"Squeeze, 2002-06-03 00:00:00\"\r\n", "2255.0,2266.0,\"Squeeze, 2008-04-28 00:00:00\"\r\n", "2266.0,2270.0,\"Squeeze, 2002-06-03 00:00:00\"\r\n", "2292.0,2298.0,\"Squeeze, 2002-06-03 00:00:00\"\r\n", "2310.0,2320.0,\"Squeeze, 2002-06-03 00:00:00\"\r\n", "2344.0,2348.0,\"Squeeze, 1976-05-28 00:00:00\"\r\n", "2352.0,2362.0,\"Squeeze, 1976-05-28 00:00:00\"\r\n", "2369.0,2374.0,\"Squeeze, 1976-05-25 00:00:00\"\r\n", "2426.0,2431.0,\"Perforation, 1972-10-21 00:00:00\"\r\n", "2431.0,2439.0,\"Perforation, 1972-10-30 00:00:00\"\r\n", "\n"]}], "source": ["print(sm.to_csv())"]}, {"cell_type": "markdown", "metadata": {}, "source": ["This isn't quite right for Petrel.\n", "\n", "Let's make another format."]}, {"cell_type": "code", "execution_count": 23, "metadata": {}, "outputs": [], "source": ["def _to_petrel_csv(strip, attr, null):\n", "    \"\"\"\n", "    Make Petrel-ready CSV text for a striplog\n", "    \"\"\"\n", "    csv = \"\"\n", "    gap_top = 0\n", "    for iv in strip.merge_neighbours():\n", "        if iv.top.middle != gap_top:\n", "            csv += f\"{gap_top},{null}\\n\"\n", "        csv += f\"{iv.top.middle},{getattr(iv.primary, attr)}\\n\"\n", "        gap_top = iv.base.middle\n", "    csv += f\"{iv.base.middle},{null}\\n\"\n", "    return csv\n", "\n", "def to_petrel(fname, strip, attr, null=None):\n", "    \"\"\"\n", "    Make a Petrel-ready CSV file.\n", "    \n", "    Args\n", "        fname (str): the filename, including extension\n", "        strip (Striplog): the striplog\n", "        null (str): what to use for nulls\n", "        \n", "    Returns\n", "        None (writes file as side effect)\n", "    \"\"\"\n", "    if null is None:\n", "        null = \"-999.25\"\n", "    with open(fname, 'w') as f:\n", "        f.write(_to_petrel_csv(strip, attr, null))\n", "    return"]}, {"cell_type": "code", "execution_count": 24, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["0,-999.25\n", "1986.0,perforation\n", "2010.0,-999.25\n", "2018.0,perforation\n", "2023.0,-999.25\n", "2037.0,perforation\n", "2053.0,-999.25\n", "2100.0,perforation\n", "2105.0,-999.25\n", "2112.0,perforation\n", "2127.0,-999.25\n", "2132.0,perforation\n", "2141.0,-999.25\n", "2180.0,perforation\n", "2195.0,-999.25\n", "2243.0,perforation\n", "2245.0,squeeze\n", "2250.0,-999.25\n", "2255.0,squeeze\n", "2270.0,-999.25\n", "2292.0,squeeze\n", "2298.0,-999.25\n", "2310.0,squeeze\n", "2320.0,-999.25\n", "2344.0,squeeze\n", "2348.0,-999.25\n", "2352.0,squeeze\n", "2362.0,-999.25\n", "2369.0,squeeze\n", "2374.0,-999.25\n", "2426.0,perforation\n", "2439.0,-999.25\n", "\n"]}], "source": ["print(_to_petrel_csv(sm, attr='type', null=-999.25))"]}, {"cell_type": "code", "execution_count": 25, "metadata": {}, "outputs": [], "source": ["to_petrel(\"well_for_petrel.csv\", sm, attr='type')"]}, {"cell_type": "markdown", "metadata": {}, "source": ["---\n", "\n", "&copy; 2020 Agile Scientific, licenced CC-BY"]}], "metadata": {"kernelspec": {"display_name": "Python 3 (ipykernel)", "language": "python", "name": "python3"}, "language_info": {"codemirror_mode": {"name": "ipython", "version": 3}, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.9.7"}}, "nbformat": 4, "nbformat_minor": 2}