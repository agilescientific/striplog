{"cells": [{"cell_type": "markdown", "metadata": {}, "source": ["# Basic objects"]}, {"cell_type": "markdown", "metadata": {}, "source": ["A `striplog` depends on a hierarchy of objects. This notebook shows the objects and their basic functionality.\n", "\n", "- [Lexicon](#Lexicon): A dictionary containing the words and word categories to use for rock descriptions.\n", "- [Component](#Component): A set of attributes. \n", "- [Interval](#Interval): One element from a Striplog \u2014\u00a0consists of a top, base, a description, one or more Components, and a source.\n", "\n", "Striplogs (a set of `Interval`s) are described in [a separate notebook](01_Basics.ipynb).\n", "\n", "Decors and Legends are also described in [another notebook](03_Display_objects.ipynb)."]}, {"cell_type": "code", "execution_count": 1, "metadata": {}, "outputs": [{"data": {"text/plain": ["'0.8.4'"]}, "execution_count": 1, "metadata": {}, "output_type": "execute_result"}], "source": ["import striplog\n", "striplog.__version__\n", "\n", "# If you get a lot of warnings here, just run it again."]}, {"cell_type": "markdown", "metadata": {}, "source": ["<hr />"]}, {"cell_type": "markdown", "metadata": {}, "source": ["## Lexicon"]}, {"cell_type": "code", "execution_count": 2, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["\n", "    A Lexicon is a dictionary of 'types' and regex patterns.\n", "\n", "    Most commonly you will just load the default one.\n", "\n", "    Args:\n", "        params (dict): The dictionary to use. For an example, refer to the\n", "            default lexicon in ``defaults.py``.\n", "    \n"]}], "source": ["from striplog import Lexicon\n", "print(Lexicon.__doc__)"]}, {"cell_type": "code", "execution_count": 3, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["Help on class Lexicon in module striplog.lexicon:\n", "\n", "class Lexicon(builtins.object)\n", " |  Lexicon(params)\n", " |  \n", " |  A Lexicon is a dictionary of 'types' and regex patterns.\n", " |  \n", " |  Most commonly you will just load the default one.\n", " |  \n", " |  Args:\n", " |      params (dict): The dictionary to use. For an example, refer to the\n", " |          default lexicon in ``defaults.py``.\n", " |  \n", " |  Methods defined here:\n", " |  \n", " |  __init__(self, params)\n", " |      Initialize self.  See help(type(self)) for accurate signature.\n", " |  \n", " |  __repr__(self)\n", " |      Return repr(self).\n", " |  \n", " |  __str__(self)\n", " |      Return str(self).\n", " |  \n", " |  expand_abbreviations(self, text)\n", " |      Parse a piece of text and replace any abbreviations with their full\n", " |      word equivalents. Uses the lexicon.abbreviations dictionary to find\n", " |      abbreviations.\n", " |      \n", " |      Args:\n", " |          text (str): The text to parse.\n", " |      \n", " |      Returns:\n", " |          str: The text with abbreviations replaced.\n", " |  \n", " |  find_synonym(self, word)\n", " |      Given a string and a dict of synonyms, returns the 'preferred'\n", " |      word. Case insensitive.\n", " |      \n", " |      Args:\n", " |          word (str): A word.\n", " |      \n", " |      Returns:\n", " |          str: The preferred word, or the input word if not found.\n", " |      \n", " |      Example:\n", " |          >>> syn = {'snake': ['python', 'adder']}\n", " |          >>> find_synonym('adder', syn)\n", " |          'snake'\n", " |          >>> find_synonym('rattler', syn)\n", " |          'rattler'\n", " |      \n", " |      TODO:\n", " |          Make it handle case, returning the same case it received.\n", " |  \n", " |  find_word_groups(self, text, category, proximity=2)\n", " |      Given a string and a category, finds and combines words into\n", " |      groups based on their proximity.\n", " |      \n", " |      Args:\n", " |          text (str): Some text.\n", " |          tokens (list): A list of regex strings.\n", " |      \n", " |      Returns:\n", " |          list. The combined strings it found.\n", " |      \n", " |      Example:\n", " |          COLOURS = [r\"red(?:dish)?\", r\"grey(?:ish)?\", r\"green(?:ish)?\"]\n", " |          s = 'GREYISH-GREEN limestone with RED or GREY sandstone.'\n", " |          find_word_groups(s, COLOURS) --> ['greyish green', 'red', 'grey']\n", " |  \n", " |  get_component(self, text, required=False, first_only=True)\n", " |      Takes a piece of text representing a lithologic description for one\n", " |      component, e.g. \"Red vf-f sandstone\" and turns it into a dictionary\n", " |      of attributes.\n", " |      \n", " |      TODO:\n", " |          Generalize this so that we can use any types of word, as specified\n", " |          in the lexicon.\n", " |  \n", " |  split_description(self, text)\n", " |      Split a description into parts, each of which can be turned into\n", " |      a single component.\n", " |  \n", " |  ----------------------------------------------------------------------\n", " |  Class methods defined here:\n", " |  \n", " |  default() from builtins.type\n", " |      Makes the default lexicon, as provided in ``defaults.py``.\n", " |      \n", " |      Returns:\n", " |          Lexicon: The default lexicon.\n", " |  \n", " |  from_json_file(filename) from builtins.type\n", " |      Load a lexicon from a JSON file.\n", " |      \n", " |      Args:\n", " |          filename (str): The path to a JSON dump.\n", " |  \n", " |  ----------------------------------------------------------------------\n", " |  Readonly properties defined here:\n", " |  \n", " |  categories\n", " |      Lists the categories in the lexicon, except the\n", " |      optional categories.\n", " |      \n", " |      Returns:\n", " |          list: A list of strings of category names.\n", " |  \n", " |  ----------------------------------------------------------------------\n", " |  Data descriptors defined here:\n", " |  \n", " |  __dict__\n", " |      dictionary for instance variables (if defined)\n", " |  \n", " |  __weakref__\n", " |      list of weak references to the object (if defined)\n", "\n"]}], "source": ["help(Lexicon)"]}, {"cell_type": "code", "execution_count": 3, "metadata": {}, "outputs": [{"data": {"text/plain": ["{'colour': ['red(?:dish)?', 'gray(?:ish)?', 'grey(?:ish)?', 'black(?:ish)?', 'whit(?:e|ish)', 'blu(?:e|ish)', 'purpl(?:e|ish)', 'yellow(?:ish)?', 'green(?:ish)?', 'brown(?:ish)?', 'light', 'dark', 'sandy'], 'abbreviations': {'Aglm': 'agglomerate', 'rexl': 'recrystallization', 'micropor': 'microporosity', 'OCM': 'oil cut mud', 'lt': 'lighter', 'fnt': 'faintly', 'Foss': 'fossiliferous', 'corln': 'coralline', 'Arag': 'aragonite', 'Ls': 'limestone', 'Plag': 'plagioclase', 'sqz': 'squeezed', 'MMCFG': 'million cubic feet of gas', 'prly': 'pearly', 'aft': 'after', 'sol': 'solitary', 'Jt': 'joint', 'intpar': 'interparticle', 'apr': 'apparent', 'lithgr': 'lithographic', 'tstg': 'testing', 'Deer': 'decrease', 't.b.': 'thin-bedded', 'rbl': 'rubblbly', 'elong': 'elongate', 'Sa': 'salt', 'Spg': 'sponge', 'Deb': 'debris', 'assoc': 'associated', 'hi': 'high', 'wtr': 'water', 'gywk': 'graywacke', 'calctc': 'calcitic', 'In': 'inch', 'Unconf': 'unconformity', 'O&SW': 'oil and salt water', 'Ltl': 'little', 'Conc': 'concretion', 'rhb': 'rhombic', 'crpxln': 'crystocrystalline', 'Exclas': 'extraclast', 'BOPH': 'barrels of oil per hour', 'Res': 'residue', 'strg': 'stringer', 'Micr': 'micrite', 'ES': 'electric', 'Ceph': 'cephalopod', 'Tp': 'top', 'mat': 'material, matter', 'Cvg': 'caving', 'x-strat': 'cross-stratified', 'Tent': 'tentaculites*', 'spic': 'spicular', 'Char': 'charophyte', 'Grt': 'granite', 'Av': 'average', 'mtx': 'matrix', 'Sphal': 'sphalerite', 'Tas': 'tasmanites*', 'mot': 'mottled', 'SO': 'show of oil', 'chit': 'chitinous', 'Solen': 'solenopora*', 'onc': 'oncolites', 'fls': 'flesh', 'acic': 'acicular', 'Kao': 'kaolin', 'Pent': 'pentamerus*', 'spher': 'spherulitic', 'clyst': 'claystone', 'sks': 'slickensided', 'x': 'cross', 'perm': 'permeability', 'blky': 'blocky', 'sa': 'salt', 'lim': 'itic', 'Cub': 'cube', 'GIP': 'good initial puff', 'Sphaer': 'sphaerocodium*', 'pisol': 'pisolitic', 'Tr': 'trace', 'scat': 'scattered', 'ool': 'oolitic', 'incr': 'increasing', 'vug': 'vugular', 'dns': 'denser', 'loc': 'location', 'blsh': 'bluish', 'Ptg': 'parting', 'mod': 'moderate', 'Rf': 'reef', \"'' or do\": 'ditto', 'rng': 'range', 'eux': 'euxinic', 'hvy': 'heavy', 'litt': 'littoral', 'Tham': 'thamnopora*', 'qtzt': 'quartzite', 'abs': 'absent', 'drsy': 'drusy', 'gen': 'generally', 'Fe-mag': 'ferro-magnesian', 'grd': 'graded', 'sdy': 'sandy', 'contm': 'contaminated', 'shad': 'shadow', 'Min': 'mineral', 'Styl': 'stylolite', 'Grv': 'gravel', 'rug': 'rugosa', 'Ren': 'renalcis*', 'Glos': 'gloss', 'comp': 'completion', 'grysh': 'greyish', 'Musc': 'muscovite', 'jt': 'jointing', 'Gr': 'grains', 'p.p.': 'pin-poin', '(D)': 'development', 'Bry': 'bryozoa', 'x-lam': 'cross-laminated', 'BWPD': 'barrels of water per day', 'dissem': 'disseminated', 'gns': 'gneiss', 'Radax': 'radiaxial', 'OTS': 'oil to surface', 'Gast': 'gastropod', 'Slst': 'siltstone', 'Cht': 'chert', 'ves': 'vesicular', 'glau': 'glauconitic', 'dess': 'dessiccation', 'vert': 'vertical', 'Shlt por': 'shelter porosity', 'Nod': 'nodules', 'rdsh': 'redish', 'indst': 'indistinct', '&': 'and', 'Fp': 'flowing pressure', 'gept': 'geopetal', 'pos': 'possibility', 'Scaph': 'scaphopod', 'calc': 'calcitareous', 'cren': 'crenulated', 'Poln': 'pollen', 'k': 'permeabilityable', 'dk': 'darker', 'Biosp': 'biosparite', 'w/': 'with', 'Hem': 'hematite', 'intr': 'intrusionive', 'brt': 'bright', 'Ark': 'arkose', 'Splin': 'splintery', 'x-bd': 'cross-bedded', 'brd': 'bored', 'crnk': 'crinkled', 'Wd': 'wood', 'DIL': 'dual induction laterolog', 'Shl': 'shell', 'Sedm': 'sediment', 'dol': 'dolomitic', 'lav': 'lavender', 'yelsh': 'ish', 'tuf': 'tuffaceous', 'Sid': 'siderite', 'brec': 'brecciated', 'nod': 'nodule', 'brhg': 'branching', 'I.P.': 'in part', 'Micropor': 'micropore', 'tt': 'tightly', 'fenst': 'fenestral', 'cub': 'cubic', 'posa': 'possible', 'Assem': 'Assem', 'Fau': 'fauna', 'fros': 'frosted', 'prob': 'probably', 'fspr': 'feldsparathic', 'Lut': 'lutite', 'hom': 'homogeneous', 'cmt': 'cemented', 'GCW': 'gas cut water', 'gvl': 'gravel', 'FDL': 'formation density log', 'C': 'coal', 'Bld': 'boulder', 'grapst': 'grapestone', 'frmwk': 'framework', 'Ig': 'igneous rock', 'biost': 'biostromal', 'lam': 'laminated', 'mrly': 'marly', 'pkr': 'packer', 'ML': 'microlog, minilog', 'mica': 'micaeous', 'sch': 'schist', 'ooc': 'oocastic', 'sm': 'smooth', 'Sh': 'shale', 'strat': 'strataified', 'Slt': 'silt', 'freq': 'frequent', 'Euryamph': 'euryamphipora*', 's': 'small', 'flky': 'flaky', 'wvy': 'wavy', 'bdg': 'bedding', 'occ': 'occasional', 's & p': 'salt and pepper', 'BHCS': 'bore hole compensated sonic', 'Bm': 'basement', 'ctc': 'contact', 'gy': 'gray', 'wh': 'white', 'p.d': 'pressure deformation', 'evap': 'evapourititic', 'cov': 'covered', 'Lim': 'limonite', 'Pap': 'paper', 'len': 'lentilcular', 'pt': 'partly', 'a.a.': 'same as above sample', 'por': 'poroussity', 'hydc': 'hydrocarbon', 'Spr': 'spore', 'hrtl': 'horizontal', 'orsh': 'orangish', 'Spl': 'sampole', 'Mn': 'manganese', 'slily': 'slightly', 'chty': 'cherty', 'micgr': 'micrograined', 'Pch': 'patch', 'Fuc': 'fucoid', 'bioh': 'biohermal', 'SOCW': 'slight oil cut water', 'DL': 'density log', 'gl': 'glassy', 'pyrbit': 'pyrobitumen', 'chk': 'chalky', 'Gil': 'gilsonite', 'Surf': 'surface', 'Allo': 'allochem', 'p': 'poorly', 'spr': 'sparry', 'G': 'gas', 'coqid': 'coquinaoid', 'LL8': 'laterolog-8', 'abnt': 'abundant', 'Cor': 'coral', 'Ool': 'oolite', 'Chal': 'chalcedony', 'thk': 'thick', 'wk': 'weak', 'Bent': 'bentonite', 'cp': 'compare', 'syn': 'syntaxial', 'Spo': 'spore', 'Cono': 'conodont', 'SGCM': 'slight gas cut mud', 'Microstyl': 'microstylolite', 'GAP': 'good air blow', 'meta': 'metamorphic', 'mar': 'maroon', 'ptg': 'parting', 'spl': 'sample', 'bit': 'bitumeninous', 'blksh': 'blackish', 'pyrcl': 'pyroclastic', 'Par': 'particle', 'Peld': 'pelletoid', 'srt': 'sorting', 'sacc': 'saccharoidal', 'intxln': 'intercrystalline', 'Repl': 'replaced', 'Hyde': 'hydrocarbon', 'BHT': 'bottom hole temperature', 'embd': 'embedded', 'vgt': 'varigated', 'Chlor': 'chlorite', 'ck': 'choke', 'stmg': 'streaming', 'rf': 'reefoid', 'V.op': 'valve open', 'Biot': 'biotite', 'cl': 'clastic', 'Biomi': 'biomicrite', 'tr': 'trace', 'Strk': 'streak', 'Exv': 'extrusive rock', 'OSR': 'oil source rock', 'Sol': 'Soution', 'sbrndd': 'sub rounded', 'repl': 'replacement', 'bot': 'botryoidal', 'qtzc': 'quartzitic', 'Pyr': 'pyrite', 'clus': 'cluster', 'BHFP': 'bottom hole flow pressure', 'Intclas': 'intraclast', 'Pyrxn': 'pyroxene', 'conch': 'conchoidal', 'Plcy': 'palecypod', 'Mic': 'micaceous', 'nac': 'nacerous', 'crd': 'cored', 'mott': 'mottled', 'vps': 'very poor samples', 'IES': 'induction electric', 'strgr': 'stringer', 'prphy': 'porphyry', 'bldr': 'boulder', 'bu': 'buff', 'vrtl': 'vertical', 'Macrofos': 'macrofossil', 'tns': 'tension', 'fos': 'fossiliferous', 'Cont': 'content', 'Scol': 'scolecodonts', 'slky': 'silky', 'Chit': 'chitinous', 'sy-Ca': 'sparry calcite', 'skel': 'skeletal', 'Crin': 'crinoidal', 'Phyl': 'phyllite', 'Jasp': 'jasper', 'musc': 'muscovite', 'D & A': 'dry and abandoned', 'Fen': 'fenestra', 'ark': 'arkosic', 'pel': 'pellet', 'chlor': 'chlorite', 'imp': 'impression', 'phen': 'phenocrysts', 'OWPB': 'oil well plugged back', 'Pend': 'pendularous', 'Bdg': 'bedding', 'w/o': 'without w/o', 'intlam': 'interlaminated', 'Pelec': 'pelecypod', 'pred': 'predominantly', 'rad': 'radiating', 'bor': 'boreding', 'or': 'orangish', 'Milid': 'miliolid', 'Lat': 'laterite', 'Mag': 'magnetite', 'Foram': 'foraminifera', 'vi': 'violet', 'conspic': 'conspicuous', 'fnly': 'finly', 'G.W.': 'granite wash', 'Lam': 'laminations', 'Gal': 'galeolaria*', 'tex': 'texture', 't.s.': 'thin section', 'intgn': 'inter grown', 'sps': 'sparsly', 'rr': 'rare', 'Bit': 'bitumen', 'diagn': 'diagenesisetic', 'sed': 'sedimentary', 'prim': 'primary', 'typ': 'typical', 'Calc': 'calcite', 'Gran': 'granule', 'lge': 'large', 'Vnlet': 'veinlet', 'bld': 'bladed', 'S.W.': 'salt water', 'BHSIP': 'bottom hole shut in pressure', 'gry': 'greyish', 'sec': 'secondary', 'chal': 'chalcedony', 'sln': 'solution', 'psool': 'pseudo oolitic', 'drlr': 'driller', 'circ': 'circulation', 'Pkst': 'packstone', 'poly': 'polygonal', 'Ooc': 'oolicast', 'Het': 'Heterostegina', 'W.R.': 'washed residue', 'Satm sat': 'saturation', 'intv': 'interval', 'slt': 'silt', 'dru': 'drusy', 'bur': 'burrowed', 'Rpl': 'ripple', 'argl': 'argillate', 'Brac': 'brachiopod', 'Ech': 'echinoid', 'splty': 'splintery', 'boudg': 'boudinage', 'crpxl': 'cryptocrystalline', 'cln': 'clean', 'GOR': 'gas-to-oil ratio', 'Volc': 'volcanic', 'BHP': 'bottom hole pressure', 'Fus': 'fusulinid', 'mic': 'micro', 'pet': 'petroleumiferous', 'Gt': 'grit', 'dend': 'dendritic', 'flor': 'fluorescence', 'Str': 'structure', 'uni': 'uniform', 'gnsh': 'greenish', 'sil': 'siliceous', 'rmn': 'remainant', 'Syring': 'syringopora*', 'FTAB': 'faint air blow', 'Cmt': 'cement', 'PPM': 'parts per million', 'fltg': 'floating', 'Trip': 'tripoli', 'abd': 'abundant', 'com': 'common', 'slb': 'slabby', 'frac': 'fractured', 'Pol': 'polish', 'gyp': 'gypsumiferous', 'Rud': 'rudist', 'Port por': 'porosity', 'Rec': 'recovery', 'Lig': 'lignite', 'u': 'upper', 'sat': 'saturated', 'phos': 'phosphatic', 'Smwt': 'somewhat', 'LL': 'laterolog', 'dom': 'dominant', 'Evap': 'evapourite', 'bioturb': 'bioturbated', 's&p': 'salt & pepper', 'PB': 'plugged back', 'FIt': 'fault', 'pbl': 'pebble (4-64 mm)', 'Para': 'paraparchites*', 'Vn': 'vein', 'crpld': 'crumpled', 'intgran': 'intergranular', 'strk': 'streaked', 'Grst': 'grainstone', 'oo': 'ooidal', 'bri': 'bright', 'och': 'ochre', 'gr': 'grained', 'mnrl': 'mineralized', 'sft': 'soft', 'lac': 'lacustrine', 'Equiv': 'equivalent', 'w': 'well', 'vcol': 'varicolored', 'Bor': 'bored', 'Wkst': 'wackestone', '@': 'at', 'gd': 'good', 'irid': 'iridescent', 'rndd': 'rounded', 'Stri': 'striae', 'unident': 'unidentifiable', 'pk': 'pink', 'IAB': 'initial air blow', 'qtz': 'quartz', 'sl': 'slightly', 'Lyr': 'layer', 'Clslt': 'calcisiltite', 'spkld': 'speckled', 'p-p': 'pin point', 'flg': 'flaggy', 'des': 'descript', 'Gwke': 'graywacke', 'Qtzt': 'quartzite', 'olvn': 'olivine', 'pres': 'preservation', 'rhmb': 'rhombic', 'Spher': 'spherule', 'KB': 'kelly bushing', 'spty': 'spottedy', 'cbl': 'cobble (64-256 mm)', 'Iran': 'granule', 'Pybit': 'pyrobitumen', 'prom': 'prominently', 'Chtz': 'chitinozoa', 'uncons': 'unconsolidated', 'Fe': 'iron-ferruginous', 'intercal': 'intercalated', 'Rbl': 'rubble', 'altg': 'alternating', 'Endo': 'endothyra*', 'Bnd': 'band', 'Mbl': 'marble', 'csg': 'casing', 'SNP': 'sidewall neutron porosity log', 'bdeye': 'birdseye', 'Tub': 'tube', 'DST': 'drill stem test', 'intclas': 'intraclastic', 'lent': 'lenticular', 'SI': 'shut in', 'oomol': 'oomoldic', 'styl': 'stylotitic', 'ang': 'angular', 'Casph': 'calcisphaera*', 'S': 'sonic, acoustilog', 'brk': 'brackish', 'str': 'streak', 'G&OCM': 'gas and oil cut mud', 'psdo': 'pseudo', 'mnut': 'minute', 'SW': 'salt water', 'insl': 'insoluble', 'Belm': 'belemnites*', 'sli': 'slightly', 'num': 'numerous', 'amb': 'amber', 'Anhy': 'anhydrite', 'Incl': 'inclusion', 'Len': 'lens', 'conc': 'concretionary', 'Sd': 'sand', 'stri': 'striated', 'Psool': 'pseudo oolite', 'Ost': 'ostracod', 'Pst': 'pumice-stone', 'Spic': 'spicule', 'Gab': 'gabbro', 'men': 'meniscus', 'xln': 'crystalline', 'Novac': 'novaculite', 'intrlam': 'interlaminated', 'resd': 'residual', 'sph': 'spherules', 'Bubl': 'bubble', 'euhed': 'euhedral', 'Tf': 'tuffaceous', 'Mdst': 'mudstone', 'Rk': 'rock', 'wthd': 'weathered', 'consol': 'consolidated', 'marn': 'marine', 'dism': 'disseminated', 'OWWO': 'old well worked over', 'xbd': 'cross-bedded', 'biocl': 'bioclastic', 'med.': 'medium', 'T.D.': 'total depth', 'Phos': 'phosphate', 'ap': 'appears', 'PD': 'per day', 'Sl': 'slate', 'Meta': 'metamorphic rock', 'crinal': 'crinoidal', 'mdy': 'muddy', 'frg': 'fringing', 'intst': 'intersticitial', 'n/s': 'no show', 'Amph': 'amphipora*', 'Glauc': 'glauconite', 'grnt': 'granite', 'Sst': 'sandstone', 'carb': 'carbonaceous', 'ab': 'above', 'Ctc': 'contact', 'WAB': 'weak air blow', 'SSO': 'slight show of oil', 'fis': 'fissile', 'aglm': 'agglomerate', 'WIP': 'weak initial puff', 'Contam': 'contamination', 'rthy': 'earthy', 'crs': 'coarse', 'Sil': 'silica', 'Su': 'sulphur', 'Dia': 'diameter', 'alt': 'altering', 'Oo': 'ooid', 'Spk': 'speck', 'mass': 'massive', 'Cal': 'caliper', 'GL': 'guard log', 'g': 'good', 'detr': 'detrital', 'porcel': 'porcelaneous', 'aren': 'arenaceous', 'frs': 'fresh', 'exclas': 'extraclastic', 'fac': 'faceted', 'Inoc': 'inoceramus*', 'gty': 'gravity', 'foram': 'foraminiferal', 'incl': 'inclusion', 'pit': 'pitted', 'Pet': 'petroleum', 'op': 'open', 'GR': 'gamma ray', 'zn': 'zone', 'lse': 'loose', 'Biost': 'biostrom', 'Piso': 'pisoid', 'SO&W': 'show of oil and water', 'Btm': 'bottom', 'hex': 'hexagonal', 'frag': 'fragmental', 'rec': 'recovered', 'pris': 'prismatic', 'Flk': 'flake', 'md': 'muddy', 'clas': 'clastic', 'Perm': 'permeability', 'sd': 'sand (1/16-2 mm)', 'purp': 'purple', 'CN': 'compensated neutron', 'rsns': 'resinous', 'cntr': 'centered', 'Fvst': 'favosites*', 'intcl': 'intraclasts', 'cncn': 'concentric', 'fld': 'feldsparthic', 'hem': 'hematitic', 'Anthr': 'anthracite', 'xl': 'crystalline', 'lchd': 'leached', 'sbang': 'subangular', 'biot': 'biotite', 'mnr': 'minor', 'hornbd': 'hornblend', 'mag': 'magnetic', 'intgwn': 'intergrown', 'Bioh': 'bioherm', 'TSTM': 'too small to measure', 'sptd': 'spottedy', 'gsy': 'grasy', 'Strom': 'stromatoporoid', 'mrl': 'marly', 'Tril': 'trilobite', 'stromlt': 'stromatolite', 'cche': 'caliche', 'est': 'estimated', 'intpt': 'interpretation', 'Rhb': 'rhomb', 'cotg': 'coateding', 'Moll': 'mollusc', 'varic': 'varicolored', 'ctd': 'coated', 'ovgth': 'overgrowth', 'Frg': 'fringe', 'f': 'finely', 'Intst': 'intersticies', 'Spfool': 'superficial olite', 'Pel': 'pellet', 'Orbit': 'Orbitolina', 'ind': 'indurated', 'Diagn': 'diagenesis', 'contam': 'contaminated', 'cons': 'considerable', 'Dist': 'distillate', 'n': 'no, none, non', 'xlam': 'cross-laminated', 'Gyp': 'gypsumiferous', 'glas': 'glassy', 'MLL': 'microlaterolog', 'sltst': 'siltstone', 'sml': 'small', 'fri': 'friable', 'volat': 'volatile', 'Schm': 'schist', 'trnsp': 'transparent', 'Mid': 'middle', 'brak': 'brackish', 'Lstr': 'lustre', 'org': 'organic', 'SGCW': 'slight gas cut water', 'Girv': 'girvanella*', 'trip': 'tripolic', 'amm': 'ammonite', 'up': 'upper', 'uncons.': 'unconsolidated', 'cpct': 'compact', 'o': 'oil', 'OC': 'oil cut', 'lstr': 'lustre', 'Stylio': 'styliolina*', 'mrlst': 'marlstone', 'Glas': 'glass', 'O str': 'Ostracod', 'Ft': 'foot', 'brit': 'brittle', 'Agg': 'aggregate', 'Mat': 'material', 'rd': 'rounded', 'elg': 'elongate', 'alg': 'algal', 'tub': 'tubular', 'metaph': 'metamorphosed', 'magn': 'magnetic', 'dtrl': 'detritalus', 'S.W.C.': 'sidewall core', 'aprox': 'approximately', 'imbd': 'imbedded', 'deb': 'debris', 'pyr': 'pyritized', 'wtr cush': 'water cushion', 'Clvg': 'cleavage', 'Fluor': 'fluoresceince', 'n.s.': 'no sample', 'plas': 'plastic', 'E': 'east', 'Pt': 'part', 'hor': 'horizontal', 'venn': 'vermillon', 'sp': 'spotty', 'sim': 'similar', 'brn': 'brown', 'PH': 'per hour', 'FAB': 'fair air blow', 'DF': 'derrick floor', 'orng': 'orange', 'piso': 'pisolitic', 'Mtrx': 'matrix', 'eqnt': 'equant', 'app': 'appear', 'coq': 'coquina', 'psi': 'pounds per square inch', 'lig': 'lignitic', 'aph': 'aphanitic', 'su': 'sulphurous', 'HO': 'heavy oil', 'peld': 'pelletoidal', 'ps': 'pseudo-', 'sphal': 'sphalerite', 'Stn': 'stain', 'ireg': 'irregular', 'Zr': 'zircon', 'hkl': 'hackly', 'ferr': 'ferruginous', 'irr': 'irregular', 'trnsl': 'translucent', 'SP': 'spontaneous potential', 'fau': 'fauna', 'grad': 'grading', 'tab': 'tabular', 'r.f.p': 'rounded frosted pitted', 'yel': 'yellow', 'Brk': 'break', 'flt': 'faulted', 'Intr': 'intrusive', 'ea': 'earthy', 'Frac': 'fracture', 'BW': 'barrels of water', 'exp': 'exposed', 'Stromlt': 'stromatolite', 'Phlog': 'phloaopite', 'dolst': 'dolostone', 'rexlzd': 'recrystallized', 'Zn': 'zone', 'cb': 'carbonized', 'MCW': 'mud cut water', 'Vad': 'vadose', 'IP': 'initial production', 'lith': 'lithographic', 'intbd': 'interbedded', 'grnl': 'granule (2-4 mm)', 'GTS': 'gas to surface', 'var': 'variable', 'Glob': 'globigerina*', 'sel': 'selenite', 'm': 'medium', 'glos': 'glossy', 'thn': 'thin', 'Microfos': 'microfossilferous', 'fib': 'fibrous', 'clr': 'clear', 'spec': 'speckled', 'ahd': 'anhedral', 'Bdst': 'boundstone', 'ox': 'oxidized', 'Coq': 'coquina', 'Cbl': 'cobble', 'Oyst': 'oyster', 'drlg': 'drilling', 'Cl': 'clay', 'bo': 'bophaceous', 'Brec': 'breccia', 'ti': 'tight', 'SIP': 'shut in pressure', 'zeo': 'zeolite', 'Fe-st': 'ironstone', 'Microspr': 'microspar', 'bas': 'basaltic', 'phr': 'phreatic', 'Chaet': 'chaetetes*', 'intxl': 'intercrystalline', 'Clcrd': 'calcirudite', 'authg': 'authigenic', '(W)': 'wildcat', 'dist': 'distillate', 'Flo': 'flora', 'Wl': 'well', 'rep': 'replacedment', 'gt': 'gritty', 'ter': 'terriginous', 'Asph': 'assemblage', 'swbd': 'swabbed', 'pap': 'papery', 'Fm': 'formation', 'amor': 'amorphous', 'Bot': 'botryoid', 'Descr': 'description', 'recem': 'recemented', 'AOF': 'absolute open flow', 'mol': 'moldic', 'Bur': 'burrow', 'mky': 'milky', 'vit': 'vitreous', 'Hal': 'halitiferous', 'bcm': 'becoming', 'sid': 'sideritic', 'Fac': 'facet', 'n.v.p.': 'no visible porosity', 'sblit': 'sublithic', 'wxy': 'waxy', 'Rad': 'radial', 'sc': 'scales', 'fr': 'fair', 'res': 'residuual', 'lit': 'lithic', 'cotd gn': 'coated grains', 'Elev': 'elevation', 'gn': 'green', 'Xl': 'crystal', 'bdd': 'bedded', 'cntrt': 'contorted', 'pch': 'patchy', 'Mbr': 'member', 'SOCM': 'slight oil cut mud', 'v': 'very', 'thru': 'throughout', 'cht': 'chert', 'bulb': 'bulbous', 'pol': 'polished', 'crbnt': 'carbonate', 'Scs': 'scarce', 'Chk': 'chalk', 'Dol': 'dolomite', 'Plt': 'plant', 'wg': 'vuggy', 'bnd': 'banded', 'depau': 'depauperate', 'DI': 'dual induction log', 'Mrl': 'marl', 'MCFG': 'thousand cubic feet of gas', 'Tex': 'texture', 'slty': 'silty', 'sa-c': 'salt castic', 'med': 'medium', 'mas': 'massive', 'devit': 'devitrified', 'struc': 'structure', 'bar': 'baritic', 'extr': 'extremely', 'N': 'Neutron', 'sb': 'sub', 'exv': 'extrusive', 'phyl': 'phyllitic', 'Cav': 'cavernous', 'ptch': 'patches', 'Clcsp': 'calcisphere', 'Clclt': 'calcilutite', 'r': 'rare', 'Stach': 'stachyodes*', 'GCM': 'gas cut mud', 'Intvl': 'interval', 'vis': 'visible', 'DLL': 'dual laterolog', 'msm': 'metasomatic', 'spsly': 'sparsly', '/': 'with', 'lmn': 'limonitic', 'Clcar': 'calcarenite', 'suc': 'sucrosic', 'gran': 'granular', 'Fspr': 'feldspar', 'lmpy': 'lumpy', 'tn': 'tan', 'dkr': 'darker', 'col': 'colored', 'Var': 'variation', 'Gns': 'gneiss', 'Strat': 'strata', 'orth': 'orthoclase', 'OTD': 'old total depth', 'microxln': 'microcrystalline', 'max': 'maximum', 'choc': 'chocolate', 'cgl': 'conglomerate', 'ex': 'excellent', 'undly': 'underlying', 'anhy': 'anhydritic', 'cly': 'clayey', 'cotd': 'coateding', 'WCM': 'water cut mud', 'sz': 'size', 'arg': 'argillaceous', 'Wtr': 'water', 'min': 'mineralized', 'fuc': 'fucoidal', 'wthrd': 'weathered', 'l': 'lower', 'SO&G': 'show of oil and gas', 'Typ': 'type', 'Shw': 'show', 'Microol': 'micro-oolite', 'ga': 'gauged', 'flk': 'flake', 'lmy': 'limy', 'LSD': 'legal subdivision', 'olv': 'olive', '\u20b5': 'core', 'Db': 'diabase', 'fol': 'foliated', 'perf': 'perforated', 'O-Qtz': 'orthoquartzite', 'fen': 'fenestraal', 'Orth': 'orthoclase', 'sh': 'shale', 'Slick slick': 'slickenside', 'cvg': 'cavings', 'asph': 'asphaltic', 'Ivan': 'ivanovia*', 'bd': 'bed', 'dd': 'dead', 'BOPD': 'barrels of oil per day', 'kao': 'kaolin', 'crm': 'cream', 'Alg': 'algal', 'Mol': 'mollusca', 'BWPH': 'barrels of water per hour', 'bf': 'buff', 'Prod': 'production', 'Clst': 'claystone', 'Ctgs': 'cuttings', 'Bd': 'bed', 'blk': 'black', 'c': 'coarsely', 'Uc': 'underclay', 'fluor': 'fluoresceincent', 'sept': 'septate', 'ls': 'limestone', 'grnt.w': 'granite wash', 'BO': 'barrels of oil', 'Circ': 'circulate', 'MCO': 'mud cut oil', 'Lith': 'lithology', 'plty': 'platy', 'wi': 'with', 'amt': 'amount', 'Qtz': 'quartz', 'oom': 'oomoldic', 'pkish': 'pinkish', 'Col': 'color', 'Chara': 'charophytes', 'od': 'odor', 'shy': 'shaly', 'Clus': 'cluster', 'tgh': 'tough', 'abt': 'about', 'gil': 'gilsonite', 'grdg': 'grading', 'Grap': 'graptolite', 'O&G': 'oil and gas', 'lg': 'long', 'W': 'west', 'Rem': 'remains', 'Imp': 'impression', 'Bas': 'basalt', 'surf': 'surface', 'lrg': 'larger', 'apprx': 'approximate', 'Onc': 'oncolite', 'Frag': 'fragment', 'Bdeye': 'birdseye', 'decr': 'decreasing', 'mos': 'mosaic', 'Brach': 'brachiopod', 'Cgl': 'conglomerate', 'vrtb': 'vertebrate', 'intstl': 'interstitial', 'srtg': 'Sorteding', 'qtzs': 'quartzose', 'fl': 'filled', 'hetr': 'heterogeneous', 'euhd': 'euhedral', 'SAB': 'strong air blow', 'sug': 'sugary', 'volc': 'volcanics', 'deer': 'decreasing', 'stn': 'staining', 'fibr': 'fibrous', 'ss': 'sandstone', 'Oomol': 'oomold', 'intfrag': 'interfragmental', 'plag': 'plagioclase', 'PL': 'proximity log', 'hd': 'hard', 'Invtb': 'invertebrate', 'xbdg': 'cross-bedding', 'rnd': 'rounded', 'pl': 'plant', 'F.Q.G.': 'frosted quartz  grains', 'coln': 'colonial', 'bent': 'bentonitic', 'Pisol': 'pisolite', 'vn': 'vein', 'OFM': 'oil flecked mud', 'stal': 'stalactitic', 'ig': 'igneous', 'magnt': 'magnetite', 'intrapar': 'intraparticle', 'RT': 'rotary table', 'fl/': 'flowing', 'anhed': 'anhedral', 'Pbl': 'pebble', 'vrvd': 'varved', 'Sel': 'selenite', 'micr': 'micritic', 'chky': 'chalky', 'Vug': 'vug', 'OWDD': 'oil well drilled deeper', 'bl': 'bluish', 'abv': 'above', 'Cyp': 'cypridopsis*', 'V.P.S.': 'very poor sample V.P.S.'}, 'amount': ['streaks?', 'veins?', 'stringers?', 'interbed(?:s|ded)?', 'blotch(?:es)?', 'bands?', 'fragments?', 'impurit(?:y|ies)', 'minor', 'some', 'abundant', 'rare', 'flakes?', '[-\\\\.\\\\d]+%'], 'synonyms': {'Overburden': ['Drift'], 'Anhydrite': ['Gypsum'], 'Salt': ['Halite', 'Sylvite']}, 'grainsize': ['vf(?:-)?', 'f(?:-)?', 'm(?:-)?', 'c(?:-)?', 'vc', 'very fine(?: to)?', 'fine(?: to)?', 'medium(?: to)?', 'coarse(?: to)?', 'very coarse', 'v fine(?: to)?', 'med(?: to)?', 'med.(?: to)?', 'v coarse', 'grains?', 'granules?', 'pebbles?', 'cobbles?', 'boulders?'], 'splitters': [' with ', ' contain(?:s|ing) ', '\\\\. '], 'lithology': ['overburden', 'sandstone', 'siltstone', 'shale', 'mudstone', 'limestone', 'dolomite', 'salt', 'halite', 'anhydrite', 'gypsum', 'sylvite', 'clay', 'mud', 'silt', 'sand', 'gravel', 'boulders'], 'parts_of_speech': {'subordinate': ['amount'], 'noun': ['lithology'], 'adjective': ['colour', 'grainsize']}}"]}, "execution_count": 3, "metadata": {}, "output_type": "execute_result"}], "source": ["lexicon = Lexicon.default()\n", "lexicon"]}, {"cell_type": "code", "execution_count": 4, "metadata": {}, "outputs": [{"data": {"text/plain": ["{'Anhydrite': ['Gypsum'],\n", " 'Overburden': ['Drift'],\n", " 'Salt': ['Halite', 'Sylvite']}"]}, "execution_count": 4, "metadata": {}, "output_type": "execute_result"}], "source": ["lexicon.synonyms"]}, {"cell_type": "markdown", "metadata": {}, "source": ["Most of the lexicon works 'behind the scenes' when processing descriptions into `Rock` components."]}, {"cell_type": "code", "execution_count": 5, "metadata": {}, "outputs": [{"data": {"text/plain": ["'salt'"]}, "execution_count": 5, "metadata": {}, "output_type": "execute_result"}], "source": ["lexicon.find_synonym('Halite')"]}, {"cell_type": "code", "execution_count": 6, "metadata": {}, "outputs": [{"data": {"text/plain": ["'greyish green sandstone with spotty gray shale'"]}, "execution_count": 6, "metadata": {}, "output_type": "execute_result"}], "source": ["s = \"grysh gn ss w/ sp gy sh\"\n", "lexicon.expand_abbreviations(s)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["<hr />"]}, {"cell_type": "markdown", "metadata": {}, "source": ["## Component"]}, {"cell_type": "markdown", "metadata": {}, "source": ["A set of attributes. All are optional."]}, {"cell_type": "code", "execution_count": 7, "metadata": {"collapsed": true}, "outputs": [], "source": ["from striplog import Component"]}, {"cell_type": "code", "execution_count": 8, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["\n", "    Initialize with a dictionary of properties. You can use any\n", "    properties you want e.g.:\n", "\n", "        - lithology: a simple one-word rock type\n", "        - colour, e.g. 'grey'\n", "        - grainsize or range, e.g. 'vf-f'\n", "        - modifier, e.g. 'rippled'\n", "        - quantity, e.g. '35%', or 'stringers'\n", "        - description, e.g. from cuttings\n", "    \n"]}], "source": ["print(Component.__doc__)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["We define a new rock with a Python `dict` object:"]}, {"cell_type": "code", "execution_count": 9, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td><strong>colour</strong></td><td>grey</td></tr><tr><td><strong>grainsize</strong></td><td>vf-f</td></tr><tr><td><strong>lithology</strong></td><td>sand</td></tr></table>"], "text/plain": ["Component({'colour': 'grey', 'grainsize': 'vf-f', 'lithology': 'sand'})"]}, "execution_count": 9, "metadata": {}, "output_type": "execute_result"}], "source": ["r = {'colour': 'grey',\n", "     'grainsize': 'vf-f',\n", "     'lithology': 'sand'}\n", "rock = Component(r)\n", "rock"]}, {"cell_type": "markdown", "metadata": {}, "source": ["The Rock has a colour:"]}, {"cell_type": "code", "execution_count": 10, "metadata": {}, "outputs": [{"data": {"text/plain": ["'grey'"]}, "execution_count": 10, "metadata": {}, "output_type": "execute_result"}], "source": ["rock['colour']"]}, {"cell_type": "markdown", "metadata": {}, "source": ["And it has a summary, which is generated from its attributes. "]}, {"cell_type": "code", "execution_count": 11, "metadata": {}, "outputs": [{"data": {"text/plain": ["'Grey, vf-f, sand'"]}, "execution_count": 11, "metadata": {}, "output_type": "execute_result"}], "source": ["rock.summary()"]}, {"cell_type": "markdown", "metadata": {}, "source": ["We can format the summary if we wish:"]}, {"cell_type": "code", "execution_count": 12, "metadata": {}, "outputs": [{"data": {"text/plain": ["'My rock: sand (grey, VF-F)'"]}, "execution_count": 12, "metadata": {}, "output_type": "execute_result"}], "source": ["rock.summary(fmt=\"My rock: {lithology} ({colour}, {grainsize!u})\")"]}, {"cell_type": "markdown", "metadata": {}, "source": ["The formatting supports the usual `s`, `r`, and `a`: \n", "\n", "* `s`: `str`\n", "* `r`: `repr`\n", "* `a`: `ascii`\n", "\n", "Also some string functions:\n", "\n", "* `u`: `str.upper`\n", "* `l`: `str.lower`\n", "* `c`: `str.capitalize`\n", "* `t`: `str.title`\n", "\n", "And some numerical ones, for arrays of numbers:\n", "\n", "* `+` or `\u2211`: `np.sum`\n", "* `m` or `\u00b5`: `np.mean`\n", "* `v`: `np.var`\n", "* `d`: `np.std`\n", "* `x`: `np.product`"]}, {"cell_type": "code", "execution_count": 15, "metadata": {}, "outputs": [{"data": {"text/plain": ["'The SAND is _.'"]}, "execution_count": 15, "metadata": {}, "output_type": "execute_result"}], "source": ["x = {'colour': ['Grey', 'Brown'],\n", "     'bogosity': [0.45, 0.51, 0.66],\n", "     'porosity': [0.2003, 0.1998, 0.2112, 0.2013, 0.1990],\n", "     'grainsize': 'VF-F',\n", "     'lithology': 'Sand',\n", "     }\n", "\n", "X = Component(x)\n", "\n", "# This is not working at the moment.\n", "#fmt  = 'The {colour[0]!u} {lithology!u} has a total of {bogosity!\u2211:.2f} bogons'\n", "#fmt += 'and a mean porosity of {porosity!\u00b5:2.0%}.'\n", "\n", "fmt  = 'The {lithology!u} is {colour[0]!u}.'\n", "\n", "X.summary(fmt)"]}, {"cell_type": "code", "execution_count": 16, "metadata": {}, "outputs": [{"data": {"text/plain": ["'{\"grainsize\": \"VF-F\", \"lithology\": \"Sand\"}'"]}, "execution_count": 16, "metadata": {}, "output_type": "execute_result"}], "source": ["X.json()"]}, {"cell_type": "markdown", "metadata": {}, "source": ["We can compare rocks with the usual `==` operator: "]}, {"cell_type": "code", "execution_count": 17, "metadata": {}, "outputs": [{"data": {"text/plain": ["True"]}, "execution_count": 17, "metadata": {}, "output_type": "execute_result"}], "source": ["rock2 = Component({'grainsize': 'VF-F',\n", "                   'colour': 'Grey',\n", "                   'lithology': 'Sand'})\n", "rock == rock2"]}, {"cell_type": "code", "execution_count": 18, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td><strong>colour</strong></td><td>grey</td></tr><tr><td><strong>grainsize</strong></td><td>vf-f</td></tr><tr><td><strong>lithology</strong></td><td>sand</td></tr></table>"], "text/plain": ["Component({'colour': 'grey', 'grainsize': 'vf-f', 'lithology': 'sand'})"]}, "execution_count": 18, "metadata": {}, "output_type": "execute_result"}], "source": ["rock"]}, {"cell_type": "markdown", "metadata": {}, "source": ["In order to create a Component object from text, we need a lexicon to compare the text against. The lexicon describes the language we want to extract, and what it means."]}, {"cell_type": "code", "execution_count": 19, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td><strong>colour</strong></td><td>grey</td></tr><tr><td><strong>grainsize</strong></td><td>fine</td></tr><tr><td><strong>lithology</strong></td><td>sandstone</td></tr></table>"], "text/plain": ["Component({'colour': 'grey', 'grainsize': 'fine', 'lithology': 'sandstone'})"]}, "execution_count": 19, "metadata": {}, "output_type": "execute_result"}], "source": ["rock3 = Component.from_text('Grey fine sandstone.', lexicon)\n", "rock3"]}, {"cell_type": "markdown", "metadata": {}, "source": ["Components support double-star-unpacking:"]}, {"cell_type": "code", "execution_count": 20, "metadata": {}, "outputs": [{"data": {"text/plain": ["'My rock: sandstone (grey, fine)'"]}, "execution_count": 20, "metadata": {}, "output_type": "execute_result"}], "source": ["\"My rock: {lithology} ({colour}, {grainsize})\".format(**rock3)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["<hr />"]}, {"cell_type": "markdown", "metadata": {}, "source": ["## Position\n", "\n", "Positions define points in the earth, like a top, but with uncertainty. You can define:\n", "\n", "* `upper` \u2014\u00a0the highest possible location\n", "* `middle` \u2014\u00a0the most likely location\n", "* `lower` \u2014\u00a0the lowest possible location\n", "* `units` \u2014\u00a0the units of measurement\n", "* `x` and `y` \u2014\u00a0the _x_ and _y_ location (these don't have uncertainty, sorry)\n", "* `meta` \u2014 a Python dictionary containing anything you want\n", "\n", "Positions don't have a 'way up'. "]}, {"cell_type": "code", "execution_count": 21, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["\n", "    Used to represent a position: a top or base.\n", "\n", "    Not sure whether to go with upper-middle-lower or z_max, z_mid, z_min.\n", "    Sticking to upper and lower, because ordering in Intervals is already\n", "    based on 'above' and 'below'.\n", "    \n"]}], "source": ["from striplog import Position\n", "print(Position.__doc__)"]}, {"cell_type": "code", "execution_count": 22, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td><strong>upper</strong></td><td>95.0</td></tr><tr><td><strong>middle</strong></td><td>100.0</td></tr><tr><td><strong>lower</strong></td><td>110.0</td></tr></table>"], "text/plain": ["Position({'middle': 100.0, 'units': 'm', 'meta': <striplog.position.Meta object at 0x117a05320>, 'lower': 110.0, 'upper': 95.0})"]}, "execution_count": 22, "metadata": {}, "output_type": "execute_result"}], "source": ["params = {'upper': 95,\n", "          'middle': 100,\n", "          'lower': 110,\n", "          'meta': {'kind': 'erosive', 'source': 'DOE'}\n", "          }\n", "\n", "p = Position(**params)\n", "p"]}, {"cell_type": "markdown", "metadata": {}, "source": ["Even if you don't give a `middle`, you can always get `z`: the central, most likely position:"]}, {"cell_type": "code", "execution_count": 23, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td><strong>upper</strong></td><td>75.0</td></tr><tr><td><strong>middle</strong></td><td></td></tr><tr><td><strong>lower</strong></td><td>85.0</td></tr></table>"], "text/plain": ["Position({'units': 'm', 'lower': 85.0, 'upper': 75.0})"]}, "execution_count": 23, "metadata": {}, "output_type": "execute_result"}], "source": ["params = {'upper': 75, 'lower': 85}\n", "p = Position(**params)\n", "p"]}, {"cell_type": "code", "execution_count": 24, "metadata": {}, "outputs": [{"data": {"text/plain": ["80.0"]}, "execution_count": 24, "metadata": {}, "output_type": "execute_result"}], "source": ["p.z"]}, {"cell_type": "markdown", "metadata": {}, "source": ["<hr />"]}, {"cell_type": "markdown", "metadata": {}, "source": ["## Interval\n", "\n", "Intervals are where it gets interesting. An interval can have:\n", "\n", "* a top\n", "* a base\n", "* a description (in natural language)\n", "* a list of `Component`s\n", "\n", "Intervals don't have a 'way up', it's implied by the order of `top` and `base`. "]}, {"cell_type": "code", "execution_count": 25, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["\n", "    Used to represent a lithologic or stratigraphic interval, or single point,\n", "    such as a sample location.\n", "\n", "    Initialize with a top (and optional base) and a description and/or\n", "    an ordered list of components.\n", "\n", "    Args:\n", "        top (float): Required top depth. Required.\n", "        base (float): Base depth. Optional.\n", "        description (str): Textual description.\n", "        lexicon (dict): A lexicon. See documentation. Optional unless you only\n", "            provide descriptions, because it's needed to extract components.\n", "        max_component (int): The number of components to extract. Default 1.\n", "        abbreviations (bool): Whether to parse for abbreviations.\n", "\n", "    TODO:\n", "        Seems like I should be able to instantiate like this:\n", "\n", "            Interval({'top': 0, 'components':[Component({'age': 'Neogene'})\n", "\n", "        I can get around it for now like this:\n", "\n", "            Interval(**{'top': 0, 'components':[Component({'age': 'Neogene'})\n", "\n", "        Question: should Interval itself cope with only being handed 'top' and\n", "        either fill in down to the next or optionally create a point?\n", "    \n"]}], "source": ["from striplog import Interval\n", "print(Interval.__doc__)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["I might make an `Interval` explicitly from a Component..."]}, {"cell_type": "code", "execution_count": 26, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td style=\"width:2em; background-color:#DDDDDD\" rowspan=\"6\"></td><td><strong>top</strong></td><td>10.0</td></tr><tr><td><strong>primary</strong></td><td><table><tr><td><strong>colour</strong></td><td>grey</td></tr><tr><td><strong>grainsize</strong></td><td>vf-f</td></tr><tr><td><strong>lithology</strong></td><td>sand</td></tr></table></td></tr><tr><td><strong>summary</strong></td><td>10.00 m of grey, vf-f, sand</td></tr><tr><td><strong>description</strong></td><td></td></tr><tr><td><strong>data</strong></td><td><table></table></td></tr><tr><td><strong>base</strong></td><td>20.0</td></tr></table>"], "text/plain": ["Interval({'components': [Component({'colour': 'grey', 'grainsize': 'vf-f', 'lithology': 'sand'})], 'top': Position({'middle': 10.0, 'units': 'm'}), 'data': {}, 'description': '', 'base': Position({'middle': 20.0, 'units': 'm'})})"]}, "execution_count": 26, "metadata": {}, "output_type": "execute_result"}], "source": ["Interval(10, 20, components=[rock])"]}, {"cell_type": "markdown", "metadata": {}, "source": ["... or I might pass a description and a `lexicon` and Striplog will parse the description and attempt to extract structured `Component` objects from it."]}, {"cell_type": "code", "execution_count": 27, "metadata": {}, "outputs": [{"data": {"text/plain": ["\"Interval({'components': [Component({'colour': 'grey', 'lithology': 'sandstone'})], 'top': Position({'middle': 20.0, 'units': 'm'}), 'data': {}, 'description': 'Grey sandstone with shale flakes.', 'base': Position({'middle': 40.0, 'units': 'm'})})\""]}, "execution_count": 27, "metadata": {}, "output_type": "execute_result"}], "source": ["Interval(20, 40, \"Grey sandstone with shale flakes.\", lexicon=lexicon).__repr__()"]}, {"cell_type": "markdown", "metadata": {}, "source": ["Notice I only got one `Component`, even though the description contains a subordinate lithology. This is the default behaviour, we have to ask for more components:"]}, {"cell_type": "code", "execution_count": 28, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["{'components': [Component({'colour': 'grey', 'lithology': 'sandstone'}), Component({'amount': 'flakes', 'colour': 'black', 'lithology': 'shale'})], 'top': Position({'middle': 20.0, 'units': 'm'}), 'data': {}, 'description': 'Grey sandstone with black shale flakes.', 'base': Position({'middle': 40.0, 'units': 'm'})}\n"]}], "source": ["interval = Interval(20, 40, \"Grey sandstone with black shale flakes.\", lexicon=lexicon, max_component=2)\n", "print(interval)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["`Interval`s have a `primary` attribute, which holds the first component, no matter how many components there are."]}, {"cell_type": "code", "execution_count": 29, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td><strong>colour</strong></td><td>grey</td></tr><tr><td><strong>lithology</strong></td><td>sandstone</td></tr></table>"], "text/plain": ["Component({'colour': 'grey', 'lithology': 'sandstone'})"]}, "execution_count": 29, "metadata": {}, "output_type": "execute_result"}], "source": ["interval.primary"]}, {"cell_type": "markdown", "metadata": {}, "source": ["Ask for the summary to see the thickness and a `Rock` summary of the primary component. Note that the format code only applies to the `Rock` part of the summary."]}, {"cell_type": "code", "execution_count": 30, "metadata": {}, "outputs": [{"data": {"text/plain": ["'20.00 m of grey sandstone with black shale'"]}, "execution_count": 30, "metadata": {}, "output_type": "execute_result"}], "source": ["interval.summary(fmt=\"{colour} {lithology}\")"]}, {"cell_type": "markdown", "metadata": {}, "source": ["We can change an interval's properties:"]}, {"cell_type": "code", "execution_count": 31, "metadata": {"collapsed": true}, "outputs": [], "source": ["interval.top = 18"]}, {"cell_type": "code", "execution_count": 32, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td style=\"width:2em; background-color:#DDDDDD\" rowspan=\"6\"></td><td><strong>top</strong></td><td>18.0</td></tr><tr><td><strong>primary</strong></td><td><table><tr><td><strong>colour</strong></td><td>grey</td></tr><tr><td><strong>lithology</strong></td><td>sandstone</td></tr></table></td></tr><tr><td><strong>summary</strong></td><td>22.00 m of grey, sandstone with flakes, black, shale</td></tr><tr><td><strong>description</strong></td><td>Grey sandstone with black shale flakes.</td></tr><tr><td><strong>data</strong></td><td><table></table></td></tr><tr><td><strong>base</strong></td><td>40.0</td></tr></table>"], "text/plain": ["Interval({'components': [Component({'colour': 'grey', 'lithology': 'sandstone'}), Component({'amount': 'flakes', 'colour': 'black', 'lithology': 'shale'})], 'top': Position({'middle': 18.0, 'units': 'm'}), 'data': {}, 'description': 'Grey sandstone with black shale flakes.', 'base': Position({'middle': 40.0, 'units': 'm'})})"]}, "execution_count": 32, "metadata": {}, "output_type": "execute_result"}], "source": ["interval"]}, {"cell_type": "code", "execution_count": 33, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td><strong>upper</strong></td><td>18.0</td></tr><tr><td><strong>middle</strong></td><td>18.0</td></tr><tr><td><strong>lower</strong></td><td>18.0</td></tr></table>"], "text/plain": ["Position({'middle': 18.0, 'units': 'm'})"]}, "execution_count": 33, "metadata": {}, "output_type": "execute_result"}], "source": ["interval.top"]}, {"cell_type": "markdown", "metadata": {}, "source": ["<hr />\n", "\n", "### Comparing and combining intervals"]}, {"cell_type": "code", "execution_count": 34, "metadata": {"collapsed": true}, "outputs": [], "source": ["# Depth ordered\n", "i1 = Interval(top=61, base=62.5, components=[Component({'lithology': 'limestone'})])\n", "i2 = Interval(top=62, base=63, components=[Component({'lithology': 'sandstone'})])\n", "i3 = Interval(top=62.5, base=63.5, components=[Component({'lithology': 'siltstone'})])\n", "i4 = Interval(top=63, base=64, components=[Component({'lithology': 'shale'})])\n", "i5 = Interval(top=63.1, base=63.4, components=[Component({'lithology': 'dolomite'})])\n", "\n", "# Elevation ordered\n", "i8 = Interval(top=200, base=100, components=[Component({'lithology': 'sandstone'})])\n", "i7 = Interval(top=150, base=50, components=[Component({'lithology': 'limestone'})])\n", "i6 = Interval(top=100, base=0, components=[Component({'lithology': 'siltstone'})])"]}, {"cell_type": "code", "execution_count": 35, "metadata": {}, "outputs": [{"data": {"text/plain": ["'depth'"]}, "execution_count": 35, "metadata": {}, "output_type": "execute_result"}], "source": ["i2.order"]}, {"cell_type": "markdown", "metadata": {}, "source": ["**Technical aside:** The `Interval` class is a `functools.total_ordering`, so providing `__eq__` and one other comparison (such as `__lt__`) in the class definition means that instances of the class have implicit order. So you can use `sorted` on a Striplog, for example.\n", "\n", "It wasn't clear to me whether this should compare tops (say), so that '>' might mean 'above', or if it should be keyed on thickness. I chose the former, and implemented other comparisons instead."]}, {"cell_type": "code", "execution_count": 36, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["False\n", "True\n", "0.30 m of dolomite\n"]}], "source": ["print(i3 == i2)  # False, they don't have the same top\n", "print(i1 > i4)   # True, i1 is above i4\n", "print(min(i1, i2, i5).summary())  # 0.3 m of dolomite"]}, {"cell_type": "code", "execution_count": 37, "metadata": {}, "outputs": [{"data": {"text/plain": ["True"]}, "execution_count": 37, "metadata": {}, "output_type": "execute_result"}], "source": ["i2 > i4 > i5  # True"]}, {"cell_type": "markdown", "metadata": {}, "source": ["We can combine intervals with the `+` operator. (However, you cannot subtract intervals.)"]}, {"cell_type": "code", "execution_count": 38, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td style=\"width:2em; background-color:#DDDDDD\" rowspan=\"6\"></td><td><strong>top</strong></td><td>62.0</td></tr><tr><td><strong>primary</strong></td><td><table><tr><td><strong>lithology</strong></td><td>sandstone</td></tr></table></td></tr><tr><td><strong>summary</strong></td><td>1.50 m of sandstone with siltstone</td></tr><tr><td><strong>description</strong></td><td>50.0% 1.00 m of siltstone with 50.0% 1.00 m of sandstone</td></tr><tr><td><strong>data</strong></td><td><table></table></td></tr><tr><td><strong>base</strong></td><td>63.5</td></tr></table>"], "text/plain": ["Interval({'components': [Component({'lithology': 'sandstone'}), Component({'lithology': 'siltstone'})], 'top': Position({'middle': 62.0, 'units': 'm'}), 'data': {}, 'description': '50.0% 1.00 m of siltstone with 50.0% 1.00 m of sandstone', 'base': Position({'middle': 63.5, 'units': 'm'})})"]}, "execution_count": 38, "metadata": {}, "output_type": "execute_result"}], "source": ["i2 + i3"]}, {"cell_type": "markdown", "metadata": {}, "source": ["Adding a rock adds a (minor) component and adds to the description. "]}, {"cell_type": "code", "execution_count": 39, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td style=\"width:2em; background-color:#DDDDDD\" rowspan=\"6\"></td><td><strong>top</strong></td><td>18.0</td></tr><tr><td><strong>primary</strong></td><td><table><tr><td><strong>colour</strong></td><td>grey</td></tr><tr><td><strong>lithology</strong></td><td>sandstone</td></tr></table></td></tr><tr><td><strong>summary</strong></td><td>22.00 m of grey, sandstone with flakes, black, shale with grey, fine, sandstone</td></tr><tr><td><strong>description</strong></td><td>Grey sandstone with black shale flakes. with Grey, fine, sandstone</td></tr><tr><td><strong>data</strong></td><td><table></table></td></tr><tr><td><strong>base</strong></td><td>40.0</td></tr></table>"], "text/plain": ["Interval({'components': [Component({'colour': 'grey', 'lithology': 'sandstone'}), Component({'amount': 'flakes', 'colour': 'black', 'lithology': 'shale'}), Component({'colour': 'grey', 'grainsize': 'fine', 'lithology': 'sandstone'})], 'top': Position({'middle': 18.0, 'units': 'm'}), 'data': {}, 'description': 'Grey sandstone with black shale flakes. with Grey, fine, sandstone', 'base': Position({'middle': 40.0, 'units': 'm'})})"]}, "execution_count": 39, "metadata": {}, "output_type": "execute_result"}], "source": ["interval + rock3"]}, {"cell_type": "code", "execution_count": 40, "metadata": {}, "outputs": [{"data": {"text/plain": ["('partially', 'containedby')"]}, "execution_count": 40, "metadata": {}, "output_type": "execute_result"}], "source": ["i6.relationship(i7), i5.relationship(i4)"]}, {"cell_type": "code", "execution_count": 41, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["True\n", "True\n", "False\n", "\n", "True\n", "True\n", "False\n", "\n", "True\n", "True\n", "False\n"]}], "source": ["print(i1.partially_overlaps(i2))  # True\n", "print(i2.partially_overlaps(i3))  # True\n", "print(i2.partially_overlaps(i4))  # False\n", "print()\n", "print(i6.partially_overlaps(i7))  # True\n", "print(i7.partially_overlaps(i6))  # True\n", "print(i6.partially_overlaps(i8))  # False\n", "print()\n", "print(i5.is_contained_by(i3))  # True\n", "print(i5.is_contained_by(i4))  # True\n", "print(i5.is_contained_by(i2))  # False"]}, {"cell_type": "code", "execution_count": 42, "metadata": {}, "outputs": [{"data": {"text/plain": ["Striplog(3 Intervals, start=63.0, stop=65.0)"]}, "execution_count": 42, "metadata": {}, "output_type": "execute_result"}], "source": ["x = i4.merge(i5)\n", "x[-1].base = 65\n", "x"]}, {"cell_type": "code", "execution_count": 43, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td style=\"width:2em; background-color:#DDDDDD\" rowspan=\"6\"></td><td><strong>top</strong></td><td>62.0</td></tr><tr><td><strong>primary</strong></td><td><table><tr><td><strong>lithology</strong></td><td>sandstone</td></tr></table></td></tr><tr><td><strong>summary</strong></td><td>0.50 m of sandstone</td></tr><tr><td><strong>description</strong></td><td></td></tr><tr><td><strong>data</strong></td><td><table></table></td></tr><tr><td><strong>base</strong></td><td>62.5</td></tr></table>"], "text/plain": ["Interval({'components': [Component({'lithology': 'sandstone'})], 'top': Position({'middle': 62.0, 'units': 'm'}), 'data': {}, 'description': '', 'base': Position({'middle': 62.5, 'units': 'm'})})"]}, "execution_count": 43, "metadata": {}, "output_type": "execute_result"}], "source": ["i1.intersect(i2, blend=False)"]}, {"cell_type": "code", "execution_count": 44, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td style=\"width:2em; background-color:#DDDDDD\" rowspan=\"6\"></td><td><strong>top</strong></td><td>62.0</td></tr><tr><td><strong>primary</strong></td><td><table><tr><td><strong>lithology</strong></td><td>limestone</td></tr></table></td></tr><tr><td><strong>summary</strong></td><td>0.50 m of limestone with sandstone</td></tr><tr><td><strong>description</strong></td><td>60.0% 1.50 m of limestone with 40.0% 1.00 m of sandstone</td></tr><tr><td><strong>data</strong></td><td><table></table></td></tr><tr><td><strong>base</strong></td><td>62.5</td></tr></table>"], "text/plain": ["Interval({'components': [Component({'lithology': 'limestone'}), Component({'lithology': 'sandstone'})], 'top': Position({'middle': 62.0, 'units': 'm'}), 'data': {}, 'description': '60.0% 1.50 m of limestone with 40.0% 1.00 m of sandstone', 'base': Position({'middle': 62.5, 'units': 'm'})})"]}, "execution_count": 44, "metadata": {}, "output_type": "execute_result"}], "source": ["i1.intersect(i2)"]}, {"cell_type": "code", "execution_count": 45, "metadata": {}, "outputs": [{"data": {"text/html": ["<table><tr><td style=\"width:2em; background-color:#DDDDDD\" rowspan=\"6\"></td><td><strong>top</strong></td><td>61.0</td></tr><tr><td><strong>primary</strong></td><td><table><tr><td><strong>lithology</strong></td><td>limestone</td></tr></table></td></tr><tr><td><strong>summary</strong></td><td>2.50 m of limestone with siltstone</td></tr><tr><td><strong>description</strong></td><td>60.0% 1.50 m of limestone with 40.0% 1.00 m of siltstone</td></tr><tr><td><strong>data</strong></td><td><table></table></td></tr><tr><td><strong>base</strong></td><td>63.5</td></tr></table>"], "text/plain": ["Interval({'components': [Component({'lithology': 'limestone'}), Component({'lithology': 'siltstone'})], 'top': Position({'middle': 61.0, 'units': 'm'}), 'data': {}, 'description': '60.0% 1.50 m of limestone with 40.0% 1.00 m of siltstone', 'base': Position({'middle': 63.5, 'units': 'm'})})"]}, "execution_count": 45, "metadata": {}, "output_type": "execute_result"}], "source": ["i1.union(i3)"]}, {"cell_type": "code", "execution_count": 46, "metadata": {}, "outputs": [{"data": {"text/plain": ["(Interval({'components': [Component({'lithology': 'siltstone'})], 'top': Position({'middle': 62.5, 'units': 'm'}), 'data': {}, 'description': '', 'base': Position({'middle': 63.1, 'units': 'm'})}),\n", " Interval({'components': [Component({'lithology': 'siltstone'})], 'top': Position({'middle': 63.4, 'units': 'm'}), 'data': {}, 'description': '', 'base': Position({'middle': 63.5, 'units': 'm'})}))"]}, "execution_count": 46, "metadata": {}, "output_type": "execute_result"}], "source": ["i3.difference(i5)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["<hr />\n", "\n", "<p style=\"color:gray\">\u00a92015 Agile Geoscience. Licensed CC-BY. <a href=\"https://github.com/agile-geoscience/striplog\">striplog.py</a></p>"]}], "metadata": {"kernelspec": {"display_name": "Python 3 (ipykernel)", "language": "python", "name": "python3"}, "language_info": {"codemirror_mode": {"name": "ipython", "version": 3}, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.9.7"}}, "nbformat": 4, "nbformat_minor": 1}